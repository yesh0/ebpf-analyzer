
<stdin>:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <bpf_main>:
       0:	bf 16 00 00 00 00 00 00	r6 = r1
       1:	79 62 08 00 00 00 00 00	r2 = *(u64 *)(r6 + 8)
       2:	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0)
       3:	bf 13 00 00 00 00 00 00	r3 = r1
       4:	07 03 00 00 ff 00 00 00	r3 += 255
       5:	2d 23 1c 00 00 00 00 00	if r3 > r2 goto +28 <LBB0_4>
       6:	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0)
       7:	85 00 00 00 02 00 00 00	call 2
       8:	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0)
       9:	71 11 fe 00 00 00 00 00	r1 = *(u8 *)(r1 + 254)
      10:	85 00 00 00 02 00 00 00	call 2
      11:	79 62 08 00 00 00 00 00	r2 = *(u64 *)(r6 + 8)
      12:	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0)
      13:	bf 13 00 00 00 00 00 00	r3 = r1
      14:	07 03 00 00 ff 0f 00 00	r3 += 4095
      15:	3d 23 12 00 00 00 00 00	if r3 >= r2 goto +18 <LBB0_4>
      16:	71 11 ff 00 00 00 00 00	r1 = *(u8 *)(r1 + 255)
      17:	85 00 00 00 02 00 00 00	call 2
      18:	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0)
      19:	71 11 fe 0f 00 00 00 00	r1 = *(u8 *)(r1 + 4094)
      20:	85 00 00 00 02 00 00 00	call 2
      21:	79 62 08 00 00 00 00 00	r2 = *(u64 *)(r6 + 8)
      22:	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0)
      23:	bf 13 00 00 00 00 00 00	r3 = r1
      24:	07 03 00 00 00 10 00 00	r3 += 4096
      25:	3d 23 08 00 00 00 00 00	if r3 >= r2 goto +8 <LBB0_4>
      26:	71 11 ff 00 00 00 00 00	r1 = *(u8 *)(r1 + 255)
      27:	85 00 00 00 02 00 00 00	call 2
      28:	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0)
      29:	71 11 fe 0f 00 00 00 00	r1 = *(u8 *)(r1 + 4094)
      30:	85 00 00 00 02 00 00 00	call 2
      31:	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0)
      32:	71 11 ff 0f 00 00 00 00	r1 = *(u8 *)(r1 + 4095)
      33:	85 00 00 00 02 00 00 00	call 2

0000000000000110 <LBB0_4>:
      34:	b7 00 00 00 00 00 00 00	r0 = 0
      35:	95 00 00 00 00 00 00 00	exit
