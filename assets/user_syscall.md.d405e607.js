import{_ as s,c as a,o as e,a as n}from"./app.3775c9dd.js";const u=JSON.parse('{"title":"The syscall","description":"","frontmatter":{},"headers":[{"level":2,"title":"BPF_PROG_LOAD","slug":"bpf-prog-load","link":"#bpf-prog-load","children":[]}],"relativePath":"user/syscall.md","lastUpdated":1672991337000}'),l={name:"user/syscall.md"},o=n(`<h1 id="the-syscall" tabindex="-1">The syscall <a class="header-anchor" href="#the-syscall" aria-hidden="true">#</a></h1><p>Reading <a href="https://docs.kernel.org/userspace-api/ebpf/syscall.html" target="_blank" rel="noreferrer">the syscall documentation</a> is a direct way to learn about it. An alternative is <a href="https://man7.org/linux/man-pages/man2/bpf.2.html" target="_blank" rel="noreferrer"><code>man 2 bpf</code></a> but it can miss some info.</p><p>Also, you can have a look at the Linux source code:</p><ul><li><a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/include/uapi/linux/bpf.h#L1300" target="_blank" rel="noreferrer"><code>include/uapi/linux/bpf.h</code></a> is where you can find the definition of <code>union bpf_attr</code>.</li><li><a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/kernel/bpf/syscall.c#L4911" target="_blank" rel="noreferrer"><code>kernel/bpf/syscall.c</code></a> contains all accepted <code>cmd</code> codes.</li></ul><h2 id="bpf-prog-load" tabindex="-1"><code>BPF_PROG_LOAD</code> <a class="header-anchor" href="#bpf-prog-load" aria-hidden="true">#</a></h2><p>This command consumes a rather complex <code>bpf_attr</code>, which is poorly documented. You might want to check out <a href="./libbpf.html#a-source-code-reading-list">libbpf</a> to see how the command is used in action.</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#676E95;">// https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/include/uapi/linux/bpf.h#L1358-L1393</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;"> /* anonymous struct used by BPF_PROG_LOAD command */</span></span>
<span class="line highlighted"><span style="color:#F07178;">    __u32		prog_type</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* one of enum bpf_prog_type */</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    __u32		insn_cnt</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#F07178;">    __aligned_u64	insns</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    __aligned_u64	license</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    __u32		log_level</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* verbosity level of verifier */</span></span>
<span class="line"><span style="color:#F07178;">    __u32		log_size</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* size of user buffer */</span></span>
<span class="line"><span style="color:#F07178;">    __aligned_u64	log_buf</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* user supplied buffer */</span></span>
<span class="line"><span style="color:#F07178;">    __u32		kern_version</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* not used */</span></span>
<span class="line highlighted"><span style="color:#F07178;">    __u32		prog_flags</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">prog_name</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">BPF_OBJ_NAME_LEN</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">    __u32		prog_ifindex</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* ifindex of netdev to prep for */</span></span>
<span class="line"><span style="color:#676E95;">    /* For some prog types expected attach type must be known at</span></span>
<span class="line"><span style="color:#676E95;">    * load time to verify attach type specific parts of prog</span></span>
<span class="line"><span style="color:#676E95;">    * (context accesses, allowed helpers, etc).</span></span>
<span class="line"><span style="color:#676E95;">    */</span></span>
<span class="line highlighted"><span style="color:#F07178;">    __u32		expected_attach_type</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line highlighted"><span style="color:#F07178;">    __u32		prog_btf_fd</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* fd pointing to BTF type data */</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    __u32		func_info_rec_size</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* userspace bpf_func_info size */</span></span>
<span class="line highlighted"><span style="color:#F07178;">    __aligned_u64	func_info</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* func info */</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    __u32		func_info_cnt</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* number of bpf_func_info records */</span></span>
<span class="line"><span style="color:#F07178;">    __u32		line_info_rec_size</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* userspace bpf_line_info size */</span></span>
<span class="line highlighted"><span style="color:#F07178;">    __aligned_u64	line_info</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* line info */</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    __u32		line_info_cnt</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* number of bpf_line_info records */</span></span>
<span class="line"><span style="color:#F07178;">    __u32		attach_btf_id</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* in-kernel BTF type id to attach to */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">union</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">        /* valid prog_fd to attach to bpf prog */</span></span>
<span class="line highlighted"><span style="color:#F07178;">        __u32		attach_prog_fd</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#676E95;">        /* or valid module BTF object fd or 0 to attach to vmlinux */</span></span>
<span class="line highlighted"><span style="color:#F07178;">        __u32		attach_btf_obj_fd</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    __u32		core_relo_cnt</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* number of bpf_core_relo */</span></span>
<span class="line highlighted"><span style="color:#F07178;">    __aligned_u64	fd_array</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	/* array of FDs */</span><span style="color:#F07178;"> </span></span>
<span class="line highlighted"><span style="color:#F07178;">    __aligned_u64	core_relos</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    __u32		core_relo_rec_size</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;"> /* sizeof(struct bpf_core_relo) */</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>I am not to explain all this mess. But anyway,</p><ul><li><p><code>prog_type</code>: <a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/include/uapi/linux/bpf.h#L940-L981" target="_blank" rel="noreferrer"><code>include/uapi/linux/bpf.h</code></a>: Unfortunately you can hardly find any documentation on what each type means. You may find some introduction from the Internet, like:</p><ul><li><a href="https://docs.kernel.org/bpf/programs.html" target="_blank" rel="noreferrer">uhh, the kernel documentation?</a></li><li><a href="https://lwn.net/Articles/740157/" target="_blank" rel="noreferrer">or this article at LWN</a></li><li><a href="https://blogs.oracle.com/linux/post/bpf-a-tour-of-program-types" target="_blank" rel="noreferrer">or this tour from Oracle Linux Blog</a></li></ul><p>But to stay up-to-date, you will need to <code>git blame</code> through the code and find the culprit commit (no offense).</p></li><li><p><code>insns</code>: The eBPF instructions. The most comprehensible part of this struct.</p></li><li><p><code>prog_flags</code>: It is some random bit flags\u2026\u2026 You may find the possible flags and documentation at <a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/include/uapi/linux/bpf.h#L1048-L1154" target="_blank" rel="noreferrer"><code>include/uapi/linux/bpf.h</code></a>.</p></li><li><p><code>expected_attach_type</code>: <a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/include/uapi/linux/bpf.h#L983-L1029" target="_blank" rel="noreferrer"><code>include/uapi/linux/bpf.h</code></a> (sigh)</p></li><li><p><code>prog_btf_fd</code>: A file descriptor from with <code>BPF_BTF_LOAD</code>.</p></li><li><p><code>func_info</code>, <code>line_info</code>: BTF info. See <a href="https://docs.kernel.org/bpf/btf.html#bpf-prog-load" target="_blank" rel="noreferrer">BPF Type Format (BTF)</a> for more info.</p></li><li><p><code>attach_prog_fd</code>: The file descriptor for <em>another eBPF program</em>. See <a href="https://github.com/torvalds/linux/commit/5b92a28aae4dd0f88778d540ecfdcdaec5a41723" target="_blank" rel="noreferrer">this commit</a>.</p></li><li><p><code>attach_btf_obj_fd</code>: Please refer to <a href="https://github.com/torvalds/linux/commit/290248a5b7d829871b3ea3c62578613a580a1744" target="_blank" rel="noreferrer">this commit</a>.</p></li><li><p><code>fd_array</code>: Uhh, relocation data. Please refer to <a href="https://github.com/torvalds/linux/commit/387544bfa291a22383d60b40f887360e2b931ec6" target="_blank" rel="noreferrer">this commit</a>.</p></li><li><p><code>core_relos</code>: Uhh, relocation data. Please refer to <a href="https://github.com/torvalds/linux/commit/fbd94c7afcf99c9f3b1ba1168657ecc428eb2c8d" target="_blank" rel="noreferrer">this commit</a> and <a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/include/uapi/linux/bpf.h#L6930-L6983" target="_blank" rel="noreferrer">these comments</a>.</p><p>By the way, while <code>core_relo_cnt</code> goes before <code>fd_array</code>, it has nothing to do with that. All is about padding.</p><p>(And I just don&#39;t understand why a note got placed in the commit message instead of comments.)</p></li></ul>`,9),t=[o];function p(c,r,i,d,h,_){return e(),a("div",null,t)}const y=s(l,[["render",p]]);export{u as __pageData,y as default};
