import{_ as s,c as e,o as n,a}from"./app.3775c9dd.js";const f=JSON.parse('{"title":"eBPF Verifier","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"BPF Permissions","slug":"bpf-permissions","link":"#bpf-permissions","children":[]},{"level":2,"title":"bpf_check","slug":"bpf-check","link":"#bpf-check","children":[{"level":3,"title":"add_subprog_and_kfunc","slug":"add-subprog-and-kfunc","link":"#add-subprog-and-kfunc","children":[]},{"level":3,"title":"check_subprogs","slug":"check-subprogs","link":"#check-subprogs","children":[]},{"level":3,"title":"check_btf_info","slug":"check-btf-info","link":"#check-btf-info","children":[]},{"level":3,"title":"check_attach_btf_id","slug":"check-attach-btf-id","link":"#check-attach-btf-id","children":[]},{"level":3,"title":"resolve_pseudo_ldimm64","slug":"resolve-pseudo-ldimm64","link":"#resolve-pseudo-ldimm64","children":[]},{"level":3,"title":"check_cfg","slug":"check-cfg","link":"#check-cfg","children":[]},{"level":3,"title":"do_check_subprogs","slug":"do-check-subprogs","link":"#do-check-subprogs","children":[]},{"level":3,"title":"do_check_main","slug":"do-check-main","link":"#do-check-main","children":[]},{"level":3,"title":"do_check_common","slug":"do-check-common","link":"#do-check-common","children":[]},{"level":3,"title":"Post-processing","slug":"post-processing","link":"#post-processing","children":[]}]},{"level":2,"title":"do_check","slug":"do-check","link":"#do-check","children":[{"level":3,"title":"Structure","slug":"structure","link":"#structure","children":[]}]}],"relativePath":"verifier/verifier.md","lastUpdated":1672991337000}'),o={name:"verifier/verifier.md"},l=a(`<h1 id="ebpf-verifier" tabindex="-1">eBPF Verifier <a class="header-anchor" href="#ebpf-verifier" aria-hidden="true">#</a></h1><p>This will be a really lengthy one.</p><p>You can get an impression of the internals of a verifier from:</p><ul><li><a href="https://docs.kernel.org/bpf/verifier.html" target="_blank" rel="noreferrer">The kernel documentation</a></li><li><a href="https://lwn.net/Articles/794934/" target="_blank" rel="noreferrer">and this LWN post</a>.</li></ul><p>Note that <a href="./undecidability.html">eBPF is not Turing-complete</a>.</p><h2 id="bpf-permissions" tabindex="-1">BPF Permissions <a class="header-anchor" href="#bpf-permissions" aria-hidden="true">#</a></h2><p>Some checks in the verifier are permission based. Usually the verifier allows a wider set of operations for programs from the root user, including pointer comparison, bounded loops, etc.</p><p>The commit message of <a href="https://github.com/torvalds/linux/commit/2c78ee898d8f10ae6fb2fa23a3fbaec96b1b7366" target="_blank" rel="noreferrer">bpf: Implement CAP_BPF</a> briefs on these permissions, and you are advised to read it first.</p><h2 id="bpf-check" tabindex="-1"><code>bpf_check</code> <a class="header-anchor" href="#bpf-check" aria-hidden="true">#</a></h2><p><a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/kernel/bpf/verifier.c#L15159" target="_blank" rel="noreferrer"><code>bpf_check</code></a> is where the verification process starts.</p><p>It starts by checking <code>bpf_verifier_ops</code>- a handcrafted <a href="https://en.wikipedia.org/wiki/Virtual_method_table" target="_blank" rel="noreferrer"><em>virtual method table</em></a> thing that binds different data types to their verification functions.</p><p>Then it does some allocation and initializes a <code>struct bpf_verifier_env</code>.</p><p><code>bpf_get_btf_vmlinux</code> initializes kernel BTF info.</p><p>The most of the work happens here:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/kernel/bpf/verifier.c#L15245-L15279</span></span>
<span class="line"><span style="color:#A6ACCD;">	ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add_subprog_and_kfunc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">goto</span><span style="color:#A6ACCD;"> skip_full_check</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">check_subprogs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">goto</span><span style="color:#A6ACCD;"> skip_full_check</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">check_btf_info</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> attr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> uattr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">goto</span><span style="color:#A6ACCD;"> skip_full_check</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">check_attach_btf_id</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">goto</span><span style="color:#A6ACCD;"> skip_full_check</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resolve_pseudo_ldimm64</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">goto</span><span style="color:#A6ACCD;"> skip_full_check</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">bpf_prog_is_dev_bound</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">prog</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">aux</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		ret </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">bpf_prog_offload_verifier_prep</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">prog</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ret</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;">goto</span><span style="color:#F07178;"> skip_full_check</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">check_cfg</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">goto</span><span style="color:#A6ACCD;"> skip_full_check</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">do_check_subprogs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ret </span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">do_check_main</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bpf_prog_is_dev_bound</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">prog</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">aux</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">		ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bpf_prog_offload_finalize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>Let&#39;s take them down one by one.</p><h3 id="add-subprog-and-kfunc" tabindex="-1"><code>add_subprog_and_kfunc</code> <a class="header-anchor" href="#add-subprog-and-kfunc" aria-hidden="true">#</a></h3><p>This function does the following:</p><ol><li><p>Extract all &quot;subprogs&quot; from the eBPF instructions.</p><p>By &quot;subprog&quot; we actually mean an eBPF function, as is in <a href="./../user/spec.html#function-calls"><code>BPF_PSEUDO_CALL</code></a>. We will try to find the PC to their first instruction for each one.</p><ul><li>The &quot;main&quot; subprog starts at <code>insn[0]</code>.</li><li>Each <code>BPF_PSEUDO_CALL</code> denotes an eBPF function.</li><li>Each <code>BPF_PSEUDO_FUNC</code> relocation denotes an eBPF function. (See <a href="#resolve-pseudo-ldimm64"><code>resolve_pseudo_ldimm64</code></a>.)</li></ul><p>The verifier assumes and <a href="#check-subprogs">ensures</a> that instructions in one function are consecutive, that is, the following <em>pseudo assembly</em> is not allowed:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">func1:</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    jmp func1_part2</span></span>
<span class="line"><span style="color:#A6ACCD;">func2:</span></span>
<span class="line"><span style="color:#A6ACCD;">    ret</span></span>
<span class="line"><span style="color:#A6ACCD;">func1_part2:</span></span>
<span class="line"><span style="color:#A6ACCD;">    ret</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Therefore, we can easily locate the boundaries of a function:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">func1: // start of func1</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">func2: // start of func2, end of func1</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">exit:  // end of the whole program, end of func2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>It adds a fake &quot;exit&quot; subprog to the list, denoting the end of the last function.</p></li><li><p>Extract all &quot;kfunc&quot; calls. (See <a href="./../user/spec.html#function-calls"><code>BPF_PSEUDO_KFUNC_CALL</code></a>.)</p></li></ol><h3 id="check-subprogs" tabindex="-1"><code>check_subprogs</code> <a class="header-anchor" href="#check-subprogs" aria-hidden="true">#</a></h3><p><code>check_subprogs</code> checks subprogs \u{1F61B}</p><ol><li>Ensure that jump instructions are within bounds (i.e., that it does not jump from one subprog to another).</li><li>Ensures that one subprog does not &quot;fall through&quot; to another by ensuring that it ends with a <code>BPF_EXIT</code> or a proper jump.</li><li>Checks whether a subprog contains certain instructions and sets some flags accordingly: <ul><li>tail calls,</li><li><code>BPF_IND</code> or <code>BPF_ABS</code> instructions.</li></ul></li></ol><h3 id="check-btf-info" tabindex="-1"><code>check_btf_info</code> <a class="header-anchor" href="#check-btf-info" aria-hidden="true">#</a></h3><p>Checks BTF info.</p><p>BTF info is optional for most eBPF programs, unless they contain tail calls or <code>BPF_ABS / BPF_IND</code> instructions.</p><h3 id="check-attach-btf-id" tabindex="-1"><code>check_attach_btf_id</code> <a class="header-anchor" href="#check-attach-btf-id" aria-hidden="true">#</a></h3><p>(WIP) </p><h3 id="resolve-pseudo-ldimm64" tabindex="-1"><code>resolve_pseudo_ldimm64</code> <a class="header-anchor" href="#resolve-pseudo-ldimm64" aria-hidden="true">#</a></h3><p>Just read <a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/kernel/bpf/verifier.c#L12733-L12739" target="_blank" rel="noreferrer">these comments for this function</a> and <a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/include/uapi/linux/bpf.h#L1156-L1199" target="_blank" rel="noreferrer">these comments for these macros</a>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Why are these types of relocation done in kernel space instead of user space?</p><p>Well, the verifier needs these extra info to know what exactly lies in one register slot. Otherwise, all of these pseudo instructions translate into a single type-less <code>LD_IMM64</code> instruction, and the verifier has to treat them as scalar values and forbid using them as pointers.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">mov_map_ptr R1, map_1      // typed insn</span></span>
<span class="line"><span style="color:#A6ACCD;">mov         R1, 0xdeadbeef // type-less</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">mov_func    R1, func1      // typed insn</span></span>
<span class="line"><span style="color:#A6ACCD;">mov         R1, 0xcafebabe // type-less</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></div><h3 id="check-cfg" tabindex="-1"><code>check_cfg</code> <a class="header-anchor" href="#check-cfg" aria-hidden="true">#</a></h3><p>Checks if there are unreachable instructions. (No, it cannot detect those wrapped with <code>if (0) { ... }</code>.)</p><h3 id="do-check-subprogs" tabindex="-1"><code>do_check_subprogs</code> <a class="header-anchor" href="#do-check-subprogs" aria-hidden="true">#</a></h3><p>Checks each subprog if BTF info is present.</p><p>Notice that it calls <code>do_check_common</code>, which eventually calls <a href="#do-check"><code>do_check</code></a>.</p><h3 id="do-check-main" tabindex="-1"><code>do_check_main</code> <a class="header-anchor" href="#do-check-main" aria-hidden="true">#</a></h3><p>Just calls <code>do_check_common</code>, which eventually calls <a href="#do-check"><code>do_check</code></a>.</p><h3 id="do-check-common" tabindex="-1"><code>do_check_common</code> <a class="header-anchor" href="#do-check-common" aria-hidden="true">#</a></h3><p>Prepares a <code>struct bpf_verifier_state</code> and calls <a href="#do-check"><code>do_check</code></a>.</p><p>For subprogs with BTF info, it sets up the state according to the types of their arguments.</p><h3 id="post-processing" tabindex="-1">Post-processing <a class="header-anchor" href="#post-processing" aria-hidden="true">#</a></h3><p>See <a href="./post-processing.html">post-processing</a>.</p><h2 id="do-check" tabindex="-1"><code>do_check</code> <a class="header-anchor" href="#do-check" aria-hidden="true">#</a></h2><p><a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/kernel/bpf/verifier.c#L12144-L12483" target="_blank" rel="noreferrer"><code>kernel/bpf/verifier.c#do_check</code></a>: The central part of the verifier where it does most of the work.</p><p>If you have skimmed through the interpreter implementation, you will find that, despite being significantly more complex, <code>do_check</code> is quite similar to the interpreter: an outer loop, <code>switch</code>-like dispatching (one uses a dispatching table, while the other is <code>if-else</code>).</p><p>While it contains <em>only</em> hundreds of lines of code, you can count on it to just lead you to the other <em>10k lines</em> of code, which is rather beyond my reach (yet).</p><h3 id="structure" tabindex="-1">Structure <a class="header-anchor" href="#structure" aria-hidden="true">#</a></h3><p>Despite the daunting size of the verifier, one can split it up into several portions:</p><ul><li>Value tracking: <a href="./arithmetic.html">ALU operation verification</a></li><li>Branch tracking: <a href="./conditional.html">Conditional jump tracking</a></li><li>Memory access verification</li><li>Helper function verification</li></ul>`,49),p=[l];function t(c,r,i,d,h,D){return n(),e("div",null,p)}const u=s(o,[["render",t]]);export{f as __pageData,u as default};
