import{_ as s,c as a,o as n,a as e}from"./app.3775c9dd.js";const f=JSON.parse('{"title":"Function Call Verification","description":"","frontmatter":{},"headers":[{"level":2,"title":"Helper Function Verification","slug":"helper-function-verification","link":"#helper-function-verification","children":[]},{"level":2,"title":"bpf_func_proto","slug":"bpf-func-proto","link":"#bpf-func-proto","children":[]}],"relativePath":"verifier/functions.md","lastUpdated":1672991337000}'),l={name:"verifier/functions.md"},o=e(`<h1 id="function-call-verification" tabindex="-1">Function Call Verification <a class="header-anchor" href="#function-call-verification" aria-hidden="true">#</a></h1><h2 id="helper-function-verification" tabindex="-1">Helper Function Verification <a class="header-anchor" href="#helper-function-verification" aria-hidden="true">#</a></h2><p><a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/kernel/bpf/verifier.c#L7233-L7631" target="_blank" rel="noreferrer"><code>check_helper_call</code></a> checks whether the current program is permitted to call the helper function and validates the parameters passed to that function.</p><p>First it acquires a <code>bpf_func_proto</code> from the verifier environment, as is defined in <a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/include/linux/bpf.h#L563-L602" target="_blank" rel="noreferrer"><code>include/linux/bpf.h</code></a>. In summary, <code>bpf_func_proto</code> contains the following:</p><ul><li>a function pointer to that very function,</li><li>license terms (GPL or not),</li><li>packet access,</li><li>argument information (types and BTF ids or sizes),</li><li>return value info,</li><li>and a customized function pointer for extra validation.</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Packet data seems to be transient, and such pointers need special processing, as per <a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/kernel/bpf/verifier.c#L6566-L6568" target="_blank" rel="noreferrer">the comments here</a>:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">/* Packet data might have moved, any old PTR_TO_PACKET[_META,_END]</span></span>
<span class="line"><span style="color:#676E95;"> * are now invalid, so turn them into unknown SCALAR_VALUE.</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"></span></code></pre></div></div><p>Then the verifier ensures that:</p><ul><li>the caller is license compatible with the helper function;</li><li>the caller passes the customized extra validation (seemingly disallowing probe programs from accessing some helpers for now);</li><li>the arguments conform;</li><li>the helper is used <em>correctly</em>, for example, <ul><li>not writing a map marked as <code>BPF_F_RDONLY_PROG</code>,</li><li>or not reading / modifying unused stack slots,</li><li>(as well as not violating several function specific checks);</li></ul></li><li>caller saved registers are marked as invalid;</li><li><code>R0</code> is set to something matching the return value of the helper.</li></ul><h2 id="bpf-func-proto" tabindex="-1"><code>bpf_func_proto</code> <a class="header-anchor" href="#bpf-func-proto" aria-hidden="true">#</a></h2><p>Here is a few examples:</p><ul><li><p><a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/kernel/trace/bpf_trace.c#L762" target="_blank" rel="noreferrer"><code>bpf_get_current_task</code></a>:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> bpf_func_proto bpf_get_current_task_proto </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    .func         </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> bpf_get_current_task</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    .gpl_only     </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#F07178;">    .ret_type     </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> RET_INTEGER</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>And here is a typical usage:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// From https://nakryiko.com/posts/bpf-core-reference-guide/#bpf-core-read</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> task_struct </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">task </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*)</span><span style="color:#82AAFF;">bpf_get_current_task</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> task_struct </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">parent_task</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">err </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bpf_core_read</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">parent_task</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">task</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">parent</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">  /* handle error */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/* parent_task contains the value of task-&gt;parent pointer */</span></span>
<span class="line"></span></code></pre></div></li><li><p><a href="https://github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/kernel/trace/bpf_trace.c#L216" target="_blank" rel="noreferrer"><code>bpf_probe_read_user_str</code></a>:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> bpf_func_proto bpf_probe_read_user_str_proto </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    .func         </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> bpf_probe_read_user_str</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    .gpl_only     </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#F07178;">    .ret_type     </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> RET_INTEGER</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    .arg1_type    </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> ARG_PTR_TO_UNINIT_MEM</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    .arg2_type    </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> ARG_CONST_SIZE_OR_ZERO</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    .arg3_type    </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> ARG_ANYTHING</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div></li></ul>`,11),p=[o];function t(r,c,i,y,d,F){return n(),a("div",null,p)}const u=s(l,[["render",t]]);export{f as __pageData,u as default};
