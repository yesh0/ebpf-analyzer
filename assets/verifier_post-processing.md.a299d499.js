import{_ as s,c as n,o as a,a as l}from"./app.3775c9dd.js";const C=JSON.parse('{"title":"Post-Processing","description":"","frontmatter":{},"headers":[{"level":2,"title":"check_max_stack_depth","slug":"check-max-stack-depth","link":"#check-max-stack-depth","children":[]},{"level":2,"title":"convert_ctx_accesses","slug":"convert-ctx-accesses","link":"#convert-ctx-accesses","children":[]}],"relativePath":"verifier/post-processing.md","lastUpdated":1672991337000}'),p={name:"verifier/post-processing.md"},e=l(`<h1 id="post-processing" tabindex="-1">Post-Processing <a class="header-anchor" href="#post-processing" aria-hidden="true">#</a></h1><p>After the validation, the verifier does several things, rewriting the program bytecode.</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">https:</span><span style="color:#676E95;">//github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/kernel/bpf/verifier.c#L15284</span></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">check_max_stack_depth</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/* instruction rewrites happen after this point */</span></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">optimize_bpf_loop</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;">    /* program is valid, convert *(u32*)(ctx + off) accesses */</span></span>
<span class="line"><span style="color:#A6ACCD;">    ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">convert_ctx_accesses</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">do_misc_fixups</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fixup_call_args</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">used_map_cnt </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> env</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">used_btf_cnt</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">    /* program is valid. Convert pseudo bpf_ld_imm64 into generic</span></span>
<span class="line"><span style="color:#676E95;">     * bpf_ld_imm64 instructions</span></span>
<span class="line"><span style="color:#676E95;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">convert_pseudo_ld_imm64</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="check-max-stack-depth" tabindex="-1"><code>check_max_stack_depth</code> <a class="header-anchor" href="#check-max-stack-depth" aria-hidden="true">#</a></h2><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">https:</span><span style="color:#676E95;">//github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/kernel/bpf/verifier.c#L4219</span></span>
<span class="line"><span style="color:#676E95;">/* starting from main bpf function walk all instructions of the function</span></span>
<span class="line"><span style="color:#676E95;"> * and recursively walk all callees that given function can call.</span></span>
<span class="line"><span style="color:#676E95;"> * Ignore jump and exit insns.</span></span>
<span class="line"><span style="color:#676E95;"> * Since recursion is prevented by check_cfg() this algorithm</span></span>
<span class="line"><span style="color:#676E95;"> * only needs a local stack of MAX_CALL_FRAMES to remember callsites</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">check_max_stack_depth</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> bpf_verifier_env </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="convert-ctx-accesses" tabindex="-1"><code>convert_ctx_accesses</code> <a class="header-anchor" href="#convert-ctx-accesses" aria-hidden="true">#</a></h2><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">https:</span><span style="color:#676E95;">//github.com/torvalds/linux/blob/4dc12f37a8e98e1dca5521c14625c869537b50b6/kernel/bpf/verifier.c#L13399</span></span>
<span class="line"><span style="color:#676E95;">/* convert load instructions that access fields of a context type into a</span></span>
<span class="line"><span style="color:#676E95;"> * sequence of instructions that access fields of the underlying structure:</span></span>
<span class="line"><span style="color:#676E95;"> *     struct __sk_buff    -&gt; struct sk_buff</span></span>
<span class="line"><span style="color:#676E95;"> *     struct bpf_sock_ops -&gt; struct sock</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">convert_ctx_accesses</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> bpf_verifier_env </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>You might want to check out this article <a href="https://scribe.bus-hit.me/@c0ngwang/understanding-struct-sk-buff-730cf847a722" target="_blank" rel="noreferrer">Understanding struct __sk_buff</a>, which explains the conversion a bit.</p>`,8),o=[e];function c(t,r,i,y,D,F){return a(),n("div",null,o)}const d=s(p,[["render",c]]);export{C as __pageData,d as default};
